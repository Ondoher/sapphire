var events = require('events');
var url = require('url');
var fs = require('fs');
var path = require('path');
var crypto = require('crypto');
var mootools = require('./mootools').apply(GLOBAL);
var path = require('path');
var rootDir = path.dirname(module.filename) + '/../';
var Q = require('q');
var minify = require('minify');
var shorty = CONFIG.minify?CONFIG.minify:false;
var paths = require('./routePaths');
var CssMangler = require('./cssMangler').CssMangler;

function unDos(filepath)
{
	filepath = path.resolve(filepath);

	if (filepath.indexOf(':') == 1)
	{
		filepath = filepath.slice(2);
	}

	filepath = filepath.replace(/\\/g, '/');
	return filepath;
}
rootDir = CONFIG.basePath;

var fileCache = $H({});
var javascriptCache = $H({});
var cssCache = $H({});

/**********************************************************************************
Class: Application

This implements the building of a javascript application from a set of various
parts and templates.

The document structure is specified in a file named master.html in the views
folder. There should be no presentation in this file, just the basic structure.
Inside this file should be a number of specifiers for where to put the various
parts of the generated CSS.

Sections:
	{masterCSS}			- where to put the CSS files, usually in the head
	{body}				- where to put the presentation html for the
						application. usually below the body tag
	{masterJS}			- where to put the included javascript files, usually
						below the {body} specifier
	{javaScript}		- where to place the inline javascript generated by the
						builder. This includes the variables as well as
						the javascript necessary to manage pages and dialogs.

See Also:
	<Application>
*/

exports.Application = new Class(
{
/**********************************************************************************
Constructor: initialize

Initializes the builder object, adding some required js and css files

Parameters:
	ns			- defines the name space that will be used for all javascript
				variables added to the builder
	app			- defines the application name
*/
	initialize : function(ns, req)
	{
		this.ns = ns;
		this.req = req;
		this.minify = (req && req.query.shorty !== undefined)?req.query.shorty === 'true':shorty;

		this.version = Math.random();
		this.pages = []
		this.dialogs = [];
		this.windows = [];
		this.views = [];
		this.panelSets = $H({});
		this.javascriptFiles = [];
		this.rawJavascriptFiles = [];
		this.CSSFiles = [];
		this.rawCSSFiles = [];
		this.asyncCSSFiles = [];
		this.asyncJSFiles = [];
		this.headerJSFiles = [];

		this.favicon = '';
		this.title = '';
		this.metadata = [];
		this.variables = $H({});
		this.config = $H({});
		this.replacements = $H({});
		this.literalReplacements = $H({});
		this.fileReplacements = $H({});
		this.urls = $H({});
		this.body = '';
		this.bodyFile = undefined;
		this.templates = [];
		this.templateFiles = [];
		this.links = [];
		this.baseUrl = '';
		this.states = [];
		this.mangler = new CONFIG.mangler();

		if (this.req)
		{
			this.addConfig('appPath', req.appPath);
			this.addConfig('realPath', req.realPath);
			this.addConfig('fullPath', req.fullPath);
		}

		this.masterFile = CONFIG.sapphireRoot + '/master.html';

		this.addJS([
            '/assets/js/3rdparty/jquery-1.11.3.js',
			'/assets/js/3rdparty/jquery.address.js',
			'/assets/js/3rdparty/mootools-core-1.4.5.js',
			'/assets/js/3rdparty/mootools-more-1.4.0.1.js',
			'/assets/js/3rdparty/q.js',
			'/assets/js/app/package.js',
			'/assets/js/app/eventer.js',
			'/assets/js/app/loader.js',
			'/assets/js/app/page-manager.js',
			'/assets/js/app/application.js',
			'/assets/js/app/model.js',
			'/assets/js/app/view.js',
			'/assets/js/app/controller.js',
		]);

		this.addCSS(['/assets/css/app/application.css']);
	},

/**********************************************************************************
	Method: setBaseUrl

	Call this method to set the base url to be used in front of js and css links.

	Paramters:
		url		- base url, without trailing '/'.

*/
	setBaseUrl : function(url)
	{
		this.baseUrl = url;
	},

/**********************************************************************************
	Method: addState

	Call this method to add a global state css class to the body tag

	Paramters:
		state		- the css class name
*/
	addState : function(state)
	{
		this.states.push(state);
	},

/**********************************************************************************
Method: addVariable

Call this method to add a javascript variable to the application. These
variables will be output to the namespace specified in the constructor

Parameters:
	key			- the name of the variable
	value		- the variable to set. This should be a native type, not a JSON
					encoded string
*/
	addVariable : function(key, value)
	{
		this.variables[key] = value;
	},

/**********************************************************************************
Method: addUrl

Call this method to add a url to the list of managed urls. the url's will
be availabel in <namespace>.urls

Parameters:
	name		- the name of the url
	value		- the url itself
*/
	addUrl : function(name, value)
	{
		this.urls[name] = value;
	},

/**********************************************************************************
Method: addConfig

Call this method to add a javascript variable that is used as part of configuration.
These variables will be output before the javascript is included.

Parameters:
	key			- the name of the variable
	value		- the variable to set. This should be a php type, not a JSON
					encoded string
*/
	addConfig : function(key, value)
	{
		this.config[key] = value;
	},

/**********************************************************************************
Method: addLink

Call this method to add a <link> tag to the output html

Parameters:
	rel			- the rel attribute of the link tag
	href		- the href link for the link tag
	type		- the type of the link tab
*/
	addLink : function(rel, href, type)
	{
		this.links.push({rel: rel, href: href, type: type});
	},

/**********************************************************************************
Method: setBody

Call this method to set the master file that specifies structure of the application

Parameters:
	file			- the name of the master file.
 */
	setMaster : function(file)
	{
		this.masterFile = CONFIG.basePath + '/' + file;
	},

/**********************************************************************************
Method: setBody

Call this method to set the file that specifies the body of the application.
This file should exclude all the html structure tags. The body will appear
between the <body> and </body> tags.

Parameters:
	file			- the name of the body file.
 */
	setBody : function(file)
	{
		this.bodyFile = CONFIG.basePath + '/' + file;
	},

/**********************************************************************************
Method: addTemplates

Call this method to add html files that contain global templates.
By default the templates will follow the body

Parameters:
	file			- the name of the body file. It will be relative to the
						views folder
*/
	addTemplates : function(file)
	{
		this.templateFiles.push(file);
	},

/**********************************************************************************
Method: addFileReplacement

Call this method to add a replacement that is a file. This will replace a {<name>}
variable in the output html with the contents of a file

Parameters:
	name			- the name of the {} variable
	value			- the path to the file of html
*/
	addFileReplacement : function(name, file, fullPath)
	{
		this.fileReplacements.set(name, file);
	},

/**********************************************************************************
Method: addStringReplacement

Call this method to add a replacement that is a string. This will replace a {<name>}
string in the output html

Parameters:
	name			- the name of the {} variable
	value			- the block of html to use
*/
	addStringReplacement : function(name, value)
	{
		this.replacements[name] = value;
	},

/**********************************************************************************
Method: addLiteralReplacement

Call this method to add a replacement that is a string. This will replace a {<name>}
string in the output html. The contents of this file will not be parsed for other replacements

Parameters:
	name			- the name of the {} variable
	value			- the block of html to use
*/
	addLiteralReplacement : function(name, value)
	{
		this.literalReplacements[name] = value;
	},

/**********************************************************************************
Method: addJS

Call this method to add a JavaScript file to be loaded in main body of the
application. You do not need to add JavaScript files that are specific to
pages of the application.

Parameters:
	files			- list of javascript files to add
	dontBust		- true if the js file should not be run through the cache
					busting logic
*/
	addJS : function(files, raw)
	{
		raw = (raw == undefined)?false:raw;
		var jsFiles = raw?this.rawJavascriptFiles:this.javascriptFiles;

		files.each(function(name)
		{
			if (jsFiles.indexOf(name) == -1)
			{
				jsFiles.push(name);
			}

		}, this);
	},

/**********************************************************************************
Method: addHeader

Call this method to add a JavaScript file to be loaded in main body of the
application. You do not need to add JavaScript files that are specific to
pages of the application.

Parameters:
	files			- list of javascript files to add
	dontBust		- true if the js file should not be run through the cache
					busting logic
*/
	addHeaderJS : function(files, dontBust)
	{
		dontBust = (dontBust == undefined)?false:dontBust;

		files.each(function(name)
		{
			if (this.headerJSFiles.indexOf(name) == -1) this.headerJSFiles.push(name);
		}, this);
	},

/**********************************************************************************
Method: addCSS

Call this method to add a CSS file to be loaded in main body of the application.
You do not need to add CSS files that are specific to pages of the
application.

Parameters:
	file			- the name of the css file. It will be relative to the
					/css folder
*/
	addCSS : function(files, raw)
	{
		var cssFiles = raw?this.rawCSSFiles:this.CSSFiles;

		var useFiles = [];
		files = files.unique();

		files.each(function(name)
		{
			if (cssFiles.indexOf(name) == -1)
			{
				var idx = cssFiles.length;
				cssFiles.push(name)
			}
		}, this);
	},

/**********************************************************************************
Method: addJS

Call this method to add a JavaScript file to be loaded in main body of the
application. You do not need to add JavaScript files that are specific to
pages of the application.

Parameters:
	files			- list of javascript files to add
	dontBust		- true if the js file should not be run through the cache
					busting logic
*/
	addAsyncJS : function(files, dontBust)
	{
		dontBust = (dontBust == undefined)?false:dontBust;

		files.each(function(name)
		{
			if (this.asyncJSFiles.indexOf(name) == -1)
			{
				var idx = this.asyncJSFiles.length;
				this.asyncJSFiles.push(name);
			}

		}, this);
	},

/**********************************************************************************
Method: addCSS

Call this method to add a CSS file to be loaded in main body of the application.
You do not need to add CSS files that are specific to pages of the
application.

Parameters:
	file			- the name of the css file. It will be relative to the
					/css folder
*/
	addAsyncCSS : function(files, dontBust)
	{
		dontBust = (dontBust == undefined)?false:dontBust;

		var useFiles = [];
		files = files.unique();

		files.each(function(name)
		{
			if (this.asyncCSSFiles.indexOf(name) == -1)
			{
				var idx = this.asyncCSSFiles.length;
				this.asyncCSSFiles.push(name)
			}
		}, this);
	},

/**********************************************************************************
Method: addPage

Call this method to add a page to the application. Pages will be loaded on demand
and will appear in the html element with the id of "pages".

Pages are specified using a data structure with the following members

Spec:
	name		- the name of the page as it will be referenced in JavaScript.
				see <Application>
	url			- the path to the page template.
	javascript	- an array of javascript files to be loaded before the page is
				displayed. These javascript files can assume that the dom has
				been loaded with the page content.
	css			- an array of css files to be loade for this page
	dontPrune	- set this to true to prevent the page from being removed from
				the dom when a new page is loaded. This is typically needed
				for pages with flash content

Parameters:
	spec		- the specification for this page
*/
	addPage : function(spec)
	{
		spec = $H(spec);

		spec.javascript = spec.javascript.unique();
		spec.css = spec.css.unique();

		this.pages.push(spec);
	},

/**********************************************************************************
Method: addDialog

Call this method to add a dialog to the application. Dialogs will be loaded on demand
and will appear in the html element with the id of "dialogs".

Dialogs are specified using a data structure with the following members

Spec:
	name				- the name of the dialog as it will be referenced in JavaScript.
						see <Application>
	url					- the path to the dialog template. This file will be relative to
						views/dialogs. You need to include the extension of the dialog
						file, but .html is recommended
	javascript			- an array of javascript files to be loaded before the dialog is
						displayed. These javascript files can assume that the dom has
						been loaded with the dialog content.
	css					- an array of css files to be loade for this dialog

Parameters:
	spec				- the specification for this dialog
*/
	addDialog : function(spec)
	{
		spec = $H(spec);

		spec.javascript = spec.javascript.unique();
		spec.css = spec.css.unique();

		this.dialogs.push(spec);
	},


/**********************************************************************************
Method: addWindow

Call this method to add a Window to the application. Windows will be loaded on demand
and will appear in the html element with the id of "windows".

Windows are specified using a data structure with the following members

Spec:
	name				- the name of the dialog as it will be referenced in JavaScript.
						see <Application>
	url					- the path to the dialog template. This file will be relative to
						views/dialogs. You need to include the extension of the dialog
						file, but .html is recommended
	javascript			- an array of javascript files to be loaded before the dialog is
						displayed. These javascript files can assume that the dom has
						been loaded with the dialog content.
	css					- an array of css files to be loade for this dialog

Parameters:
	spec				- the specification for this dialog
*/
	addWindow : function(spec)
	{
		spec = $H(spec);

		spec.javascript = spec.javascript.unique();
		spec.css = spec.css.unique();

		this.windows.push(spec);
	},

/**********************************************************************************
Method: addView

Call this method to add a view to the application. Views are detached pages that will will
be loaded on demand.


Views are specified using a data structure with the following members

Spec:
	name		- the name of the view as it will be referenced in JavaScript.
				see <Application>
	url			- the path to the page template.
	javascript	- an array of javascript files to be loaded before the page is
				displayed. These javascript files can assume that the dom has
				been loaded with the page content.
	css			- an array of css files to be loade for this page

Parameters:
	spec		- the specification for this page
*/
	addView : function(spec)
	{
		spec = $H(spec);

		spec.javascript = spec.javascript.unique();
		spec.css = spec.css.unique();

		this.views.push(spec);
	},

/**********************************************************************************
Method: addPanel

Call this method to add a loadable panel to the application. Panels are sub-parts of
an application that are not pages or dialogs, but managed separately. For instance,
a page may need many sub-parts, each one standing alone.

Panels are specified using a data structure with the following members

Spec:
	name				- the name of the panel as it will be referenced in JavaScript.
						  see <Application>
	url					- the path to the panel template. This file will be relative to
						  views/dialogs. You need to include the extension of the panel
						  file, but .html is recommended
	javascript			- an array of javascript files to be loaded before the dialog is
						  displayed. These javascript files can assume that the dom has
						  been loaded with the dialog content.
	css					- an array of css files to be loaded for this dialog

Parameters:
	setName				- a name of a panel set where this panel will be used. Must be a
						  a valid JavaScript identifier.
	spec				- the specification for this panel
*/
	addPanel : function(setName, spec)
	{
		spec = $H(spec);
		spec.javascript = spec.javascript.unique();
		spec.css = spec.css.unique();

		if (!this.panelSets.has(setName)) this.panelSets.set(setName, []);
			this.panelSets[setName].push(spec);

	},

/**********************************************************************************
Method: setTitle

Call this method to set the title of the application. This will appear in the <title> tag
of the output html

Parameters:
	title				- the title string
*/
	setTitle : function(title)
	{
		this.title = title;
	},

/**********************************************************************************
Method: addMetadata

Call this method to add metadata to the application. This will appear in a <metadata> tag.

Parameters:
	name		- the name of the metadata variable
	content		- the value of the metadata variable
*/
	addMetadata : function(name, content)
	{
		this.metadata.push({name: name, content: content});
	},

/**********************************************************************************
Method: makeFilename

Call this method to get the relative path name to a js or css file

Parameters:
	filename	- the original include file
*/
	makeFilename : function(filename)
	{
		return filename;
		var index = filename.indexOf('assets');
		if (index == 1)
			filename = 'public' + filename;
		else if (index == 0)
			filename = 'public/' + filename;
		else if (index != -1)
			filename = 'apps' + filename;

		return filename;
	},

/**********************************************************************************
Method: addFavicon

Call this method to set the favicon file.

Parameters:
	filename	- the name of the favicon file
*/
	setFavicon : function(filename)
	{
		this.favicon = filename;
	},

/**********************************************************************************
Method: replace

Given a source string and a hash map, find all occurances of {key} with the corresponding
value

Parameters:
	source				- the sorce string
	spec				- a hash map with the replacement keys and values

Return:
	the new result
*/
	replace : function(source, spec)
	{
		spec = $H(spec);
		spec.each(function(value, name)
		{
			source = source.replace('{' + name + '}', value);
		}, this);

		return source;
	},

	mangleThese : function(files)
	{
		for (var idx = 0; idx < files.length; idx++)
		{
			files[idx] = this.mangler.mangle(files[idx]);
		}
	},

	mangle : function(shorty)
	{
		if (CONFIG.cacheBust === false) return Q(true);
		var mangleList = [];

		this.pages.each(function(page)
		{
			mangleList = mangleList.concat(page.javascript, page.css);
			mangleList.push(page.url);
		}, this);

	// The dialogs
		this.dialogs.each(function(dialog)
		{
			mangleList = mangleList.concat(dialog.javascript, dialog.css);
			mangleList.push(dialog.url);
		}, this);

	// The windows
		this.windows.each(function(window)
		{
			mangleList = mangleList.concat(window.javascript, window.css);
			mangleList.push(window.url);
		}, this);

	// The views
		this.views.each(function(view)
		{
			mangleList = mangleList.concat(view.javascript, view.css);
			mangleList.push(view.url);
		}, this);

	// The panels
		this.panelSets.each(function(panels, name)
		{
			panels.each(function(panel)
			{
				mangleList = mangleList.concat(panel.javascript, panel.css);
				mangleList.push(panel.url);
			}, this);
		}, this);

		mangleList.push(this.favicon);
		if (!shorty)
			mangleList = mangleList.concat(this.javascriptFiles);
		mangleList = mangleList.concat(this.CSSFiles);
		mangleList = mangleList.concat(this.asyncCSSFiles);

		return this.mangler.mangleUrls(mangleList)
			.then(function()
			{

				this.pages.each(function(page)
				{
					this.mangleThese(page.javascript);
					this.mangleThese(page.css);
					page.url = this.mangler.mangle(page.url);
				}, this)

			// The dialogs
				this.dialogs.each(function(dialog)
				{
					this.mangleThese(dialog.javascript);
					this.mangleThese(dialog.css);
					dialog.url = this.mangler.mangle(dialog.url);
				}, this);

			// The windows
				this.windows.each(function(window)
				{
					this.mangleThese(window.javascript);
					this.mangleThese(window.css);
					window.url = this.mangler.mangle(window.url);
				}, this);

			// The views
				this.views.each(function(view)
				{
					this.mangleThese(view.javascript);
					this.mangleThese(view.css);
					view.url = this.mangler.mangle(view.url);
				}, this);

			// The panels
				this.panelSets.each(function(panels, name)
				{
					panels.each(function(panel)
					{
						this.mangleThese(panel.javascript);
						this.mangleThese(panel.css);
						panel.url = this.mangler.mangle(panel.url);
					}, this);
				}, this);

			// the urls
				this.urls.each(function(url, key)
				{
					this.urls[key] = this.mangler.mangle(url);
				}, this);

				if (!shorty) this.mangleThese(this.javascriptFiles);
				this.mangleThese(this.CSSFiles);
				this.mangleThese(this.asyncCSSFiles);

				this.urls.each(function(url, idx)
				{
					this.urls[idx] = this.mangler.mangle(url);
				}, this);

				this.favicon = this.mangler.mangle(this.favicon);

				return Q(true);
			}.bind(this));
	},

	getOneExternalFile : function(file)
	{
		return this.loadUrl(file);
	},

	getExternalFiles : function(files)
	{
		if (files.length == 0) return Q(this.externalContent);

		var file = files[0];
		files.splice(0, 1);

		return this.getOneExternalFile(file)
			.then(function(content)
			{
				this.externalContent += content + '\n';
				return this.getExternalFiles(files);
			}.bind(this));
	},

	makeConfigJavaScript : function()
	{
		var js = '';
		var ns = this.ns;
		js += '		var ' + ns + '= {};\n';
		js += '		var SAPPHIRE = {};\n';
		js += '		SAPPHIRE.ns = ' + JSON.stringify(ns) + ';\n';
		js += '		SAPPHIRE.forceMethod = ' + JSON.stringify(CONFIG.qsToBody?'GET':false) + ';\n';

	// The configuration variables
		this.config.urls = this.urls;
		this.config.each(function(value, name)
		{
			var json = JSON.stringify(value);
			var line = '		' + ns + '.' + name + ' = ' + json + ';\n';
			js += line;
		}, this);

		return js;
	},

	makePostJavaScript : function()
	{
		var javaScript = '';
		var app = 'SAPPHIRE.application';
		var loader = 'SAPPHIRE.loader';
		var ns = this.ns;
		var json;

	// The variables
		this.variables.each(function(value, name)
		{
			var json = JSON.stringify(value);
			var line = '		' + ns + '.' + name + ' = ' + json + ';\n';
			javaScript += line;
		}, this);

	// The pages
		this.pages.each(function(page)
		{
			var json = JSON.stringify(page);
			javaScript += '		' + app + '.addPage(' + json + ');\n';
		}, this)

	// The dialogs
		this.dialogs.each(function(dialog)
		{
			var json = JSON.stringify(dialog);
			javaScript += '		' + app + '.addDialog(' + json + ');\n';
		}, this);

	// The windows
		this.windows.each(function(window)
		{
			var json = JSON.stringify(window);
			javaScript += '		' + app + '.addWindow(' + json + ');\n';
		}, this);

	// The views
		this.views.each(function(view)
		{
			var json = JSON.stringify(view);
			javaScript += '		' + app + '.addView(' + json + ');\n';
		}, this);

	// The panels
		this.panelSets.each(function(panels, name)
		{
			panels.each(function(panel)
			{
				var json = JSON.stringify(panel);
				javaScript += '		' + app + '.addPanel(\'' + name + '\', ' + json + ');\n';
			}, this);
		}, this);


		json = JSON.stringify(this.javascriptFiles);
		javaScript += '		' + loader + '.addLoadedScript(' + json + ');\n';

		json = JSON.stringify(this.CSSFiles);
		javaScript += '		' + loader + '.addLoadedCSS(' + json + ');\n';

		if (this.asyncCSSFiles)
			javaScript += '		SAPPHIRE.loader.loadCSS(' + JSON.stringify(this.asyncCSSFiles) + ');\n';

		if (this.asyncJSFiles)
			javaScript += '		SAPPHIRE.loader.loadScripts(' + JSON.stringify(this.asyncJSFiles) + ');\n';

		javaScript += '		$(function(){SAPPHIRE.application.start()})\n';

		return javaScript;
	},

	getJsHash : function()
	{
		var files = '';

		this.javascriptFiles.each(function(file)
		{
			files += file + '\n';
		}.bind(this));

		var md5sum = crypto.createHash('md5');
		md5sum.update(files);
		var hash = md5sum.digest('hex');

		return hash;
	},

	getCssHash : function()
	{
		var files = '';

		this.CSSFiles.each(function(file)
		{
			files += file + '\n';
		}.bind(this));

		var md5sum = crypto.createHash('md5');
		md5sum.update(files);
		var hash = md5sum.digest('hex');

		return hash;
	},

	makeExternalJavaScript : function()
	{

		var javaScript = '';
		var javascriptFiles = Array.clone(this.javascriptFiles);
		var files = '';
		var cache = javascriptCache;

		javascriptFiles.each(function(file)
		{
			files += file + '\n';
		}.bind(this));


		var md5sum = crypto.createHash('md5');
		md5sum.update(files);
		var hash = md5sum.digest('hex');

		var javascript = cache.get(hash);
		if (javascript) return Q(javascript);

		this.externalContent = '';
		return this.getExternalFiles(javascriptFiles)
			.then(function(content)
			{
				var deferred = Q.defer();
				var javascript = '';

				var options = {
					ext: '.js',
					data: content,
				};

				minify(options, function(error, data)
				{
					if (error) deferred.resolve('');
					else
					{
						javascriptCache.set(hash, data);
						deferred.resolve(data);
					}
				}.bind(this))

				return deferred.promise;
			}.bind(this));
	},

	makeExternalCss : function()
	{
		var css = '';
		var CSSFiles = Array.clone(this.CSSFiles);
		var files = '';

		CSSFiles.each(function(file)
		{
			files += file + '\n';
		}.bind(this));

		var md5sum = crypto.createHash('md5');
		md5sum.update(files);
		var hash = md5sum.digest('hex');

		var css = cssCache.get(hash);
		if (css) return Q(css);

		this.externalContent = '';
		return this.getExternalFiles(CSSFiles)
			.then(function(content)
			{
				var deferred = Q.defer();
				var options = {
					ext: '.css',
					data: content
				};

				var cssMangler = new CssMangler();

				cssMangler.processContent(content)
					.then(function(content)
					{
						minify(options, function(error, data)
						{
							if (error) deferred.resolve('');
							else
							{
								cssCache.set(hash, data);
								deferred.resolve(data);
							}
						}.bind(this));
					}.bind(this));
				return deferred.promise;
			}.bind(this));

	},

	loadUrl : function(file)
	{
		var filename = paths.urlPathToFilePath(file);
		return this.loadFile(filename);
	},

	loadFile : function(file, relative)
	{
		var deferred = Q.defer();
		if (fileCache[file] != undefined && !CONFIG.builderCache) return Q(fileCache[file]);

		fs.readFile(file, function (err, data)
		{
			if (err || !data) deferred.resolve('');
			else
			{
				var content = data.toString();
				if (CONFIG.builderCache) fileCache[file] = content;
				deferred.resolve(content);
			}
		}.bind(this));

		return deferred.promise;
	},

	loadTemplate : function(file)
	{
		return this.loadFile(file, false)
			.then(function(content)
			{
				this.templates.push(content);
			}.bind(this));
	},

	loadFileReplacement : function(name, file)
	{
		return this.loadFile(file, false)
			.then(function(content)
			{
				this.replacements.set(name, content);
				return Q(true);
			}.bind(this));
	},

	loadTemplates : function()
	{
		var promises = [];

		this.templateFiles.each(function(file)
		{
			promises.push(this.loadTemplate(file));
		}, this);

		return Q.all(promises);
	},

	loadFileReplacements : function()
	{
		var promises = [];

		this.fileReplacements.each(function(file, name)
		{
			promises.push(this.loadFileReplacement(name, file));
		}, this);

		return Q.all(promises);
	},

	loadMaster : function()
	{
		return this.loadFile(this.masterFile)
			.then(function(content)
			{
				this.master = content
				return Q(true);
			}.bind(this));
	},

	loadBody : function()
	{
		if (!this.bodyFile) return Q(true);

		return this.loadFile(this.bodyFile)
			.then(function(content)
			{
				this.body = content
				return Q(true);
			}.bind(this));
	},

	getAllContent : function()
	{
		var promises = [];

		promises.push(this.loadTemplates());
		promises.push(this.loadFileReplacements());
		promises.push(this.loadMaster());
		promises.push(this.loadBody());

		return Q.all(promises);
	},

/**********************************************************************************
Method: getHTML

Call this method to get the full html for the application suitable to be output
to the browser

Returns:
	The html for the application
*/
	getHTML : function(callback)
	{
		this.getAllContent()
			.then(this.mangle.bind(this, false))
			.then(function()
			{
				var favicon = '';
				var title = '';
				var masterCSS = '';
				var masterJS = '';
				var masterLinks = '';
				var javaScript = '';
				var headerJS = '';
				var ns = this.ns;
				var metadata = '';
				var rawJS = '';
				var rawCSS = '';

				this.metadata.each(function(data)
				{
					var name = JSON.stringify(data['name']);
					var content = JSON.stringify(data['content']);
					metadata += '	<meta name=' + name + ' content=' + content + ' />\n';
				}, this);

				favicon = ' <link rel="icon" type="image/png" href="' + this.favicon + '">';

				title = '	<title>' + this.title + '</title>';

			// construct the list link files to be output
				this.links.each(function(link)
				{
					masterLinks += '	<link rel=\"' + link.rel + '\" href=\"' + link.href + '\" type=\"' + link.type + '"/>\n';
				}, this);

			// construct the list css files to be output
				if (this.minify)
				{
					var cssFile = this.req.url.split('?')[0];
					if (cssFile == '/')
						cssFile = this.req.fullPath.split('?')[0];

					cssFile = cssFile.replace(/\/$/, '');
					cssFile += '-h' + this.getCssHash();
						cssFile += '.css';
					masterCSS += '	<link type=\"text/css\" rel=\"stylesheet\" href=\"' + cssFile + '\"/>\n';
				}
				else
				{
					this.CSSFiles.each(function(file)
					{
						masterCSS += '	<link type=\"text/css\" rel=\"stylesheet\" href=\"' + file + '\"/>\n';
					}, this);
				}

				this.rawJavascriptFiles.each(function(file)
				{
					rawJS += '	<script type=\"text/javascript\" src=\"' + file +'\"></script>\n';
				}, this);

				this.rawCSSFiles.each(function(file)
				{
					rawCSS += '	<link type=\"text/css\" rel=\"stylesheet\" href=\"' + file + '\"/>\n';
				}, this);

				if (this.minify)
				{
					var javascriptFile = this.req.url.split('?')[0];

					if (javascriptFile == '/')
						javascriptFile = this.req.fullPath.split('?')[0]

					javascriptFile = javascriptFile.replace(/\/$/, '');
					javascriptFile += '-h' + this.getJsHash();
					javascriptFile += '.js';

					masterJS +=	 '	<script type=\"text/javascript\">\n';
					masterJS += this.makeConfigJavaScript();
					masterJS += '	</script>\n';
					masterJS += '	<script type=\"text/javascript\" src=\"' + javascriptFile +'\"></script>\n';
					masterJS +=	 '	<script type=\"text/javascript\">\n';
					masterJS += this.makePostJavaScript();
					masterJS += '	</script>\n';
				}
				else
				{
					masterJS += '	<script type=\"text/javascript\">\n';
					masterJS += this.makeConfigJavaScript();
					masterJS += '	</script>\n';

					this.javascriptFiles.each(function(file)
					{
						masterJS += '	<script type=\"text/javascript\" src=\"' + file +'\"></script>\n';
					}, this);

				// construct the inline javascript to add to the html page
					javaScript += ' <script type=\"text/javascript\">\n';
					javaScript += this.makePostJavaScript();
					javaScript += ' </script>\n';
				}

				this.headerJSFiles.each(function(file)
				{
					headerJS += '	<script type=\"text/javascript\" src=\"' + file +'\"></script>\n';
				}, this);

				var states = this.states.join(' ');

			// templates
				this.templates.each(function(content)
				{
					this.body += '\n' + content;
				}, this);

			// Put it all together
				var html = this.master;
				var replacements = {};

				replacements = {body: this.body, favicon:favicon, metadata: metadata, title: title, rawJS: rawJS, rawCSS: rawCSS, masterCSS: masterCSS, masterLinks: masterLinks, masterJS: masterJS, headerJS: headerJS, javaScript: javaScript, states: states};

				this.replacements.each(function(value, name)
				{
					replacements[name] = value
				}, this);

			// do this three levels deep (totally arbitrary)
				html = this.replace(html, replacements);
				html = this.replace(html, replacements);

				this.literalReplacements.each(function(value, name)
				{
					replacements[name] = value
				}, this);



				html = this.replace(html, replacements);

				callback(html);
			}.bind(this))
//			.done();
	},

	getJavaScript : function(callback)
	{
		this.mangle(true)
			.then(this.makeExternalJavaScript.bind(this))
//			this.makeExternalJavaScript()
			.then(function(content)
			{
				callback(content);
			}.bind(this)).done();
	},

	getCss : function(callback)
	{
		this.makeExternalCss()
			.then(function(content)
			{
				callback(content);
			}.bind(this)).done();
	}

});

exports.Application.implement(events.EventEmitter.prototype);

