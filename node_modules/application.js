var events = require('events');
var url = require('url');
var fs = require('fs');
var crypto = require('crypto');
var mootools = require('./mootools').apply(GLOBAL);
var CONFIG = require('config').CONFIG;


var fileCache = $H({});


/**********************************************************************************
Class: Application

This implements the building of a javascript application from a set of various
parts and templates.

The document structure is specified in a file named master.html in the views
folder. There should be no presentation in this file, just the basic structure.
Inside this file should be a number of specifiers for where to put the various
parts of the generated CSS.

Sections:
	{masterCSS}			- where to put the CSS files, usually in the head
	{body}				- where to put the presentation html for the
						application. usually below the body tag
	{masterJS}			- where to put the included javascript files, usually
						below the {body} specifier
	{javaScript}		- where to place the inline javascript generated by the
						builder. This includes the variables as well as
						the javascript necessary to manage pages and dialogs.

See Also:
	<Application>
*/

exports.SpaBuilder = new Class(
{
/**********************************************************************************
Constructor: initialize

Initializes the builder object, adding some required js and css files

Parameters:
	ns			- defines the name space that will be used for all javascript
				variables added to the builder
	app			- defines the application name
*/
	initialize : function(ns)
	{
		this.ns = ns;
		this.version = Math.random();
		this.pages = []
		this.dialogs = [];
		this.javascriptFiles = [];
		this.CSSFiles = [];

		this.favicon = '';
		this.title = '';
		this.metadata = [];
		this.variables = $H({});
		this.config = $H({});
		this.replacements = $H({});
		this.urls = $H({});
		this.body = '';
		this.templates = [];
		this.links = [];
		this.baseUrl = '';
		this.states = [];

		this.processing = 0;
		this.processFile('master.html', this.readFile.bind(this, function(content)
		{
			this.master = content.toString();
		}.bind(this)));

		this.addJS([
			'/assets/js/3rdparty/jquery-1.10.1.js',
			'/assets/js/3rdparty/jquery.address.js',
			'/assets/js/3rdparty/mootools-core-1.4.5.js',
			'/assets/js/3rdparty/mootools-more-1.4.0.1.js',
			'/assets/js/app/package.js',
			'/assets/js/app/events.js',
			'/assets/js/app/loader.js',
			'/assets/js/app/page-manager.js',
			'/assets/js/app/application.js',
			'/assets/js/app/model.js',
			'/assets/js/app/view.js',
			'/assets/js/app/controller.js',
		]);

		this.addCSS(['/assets/css/app/application.css']);
	},

/**********************************************************************************
	Method: setBaseUrl

	Call this method to set the base url to be used in front of js and css links.

	Paramters:
		url		- base url, without trailing '/'.

*/
	setBaseUrl : function(url)
	{
		this.baseUrl = url;
	},

/**********************************************************************************
Method: cachify

This method is called to bust resources out of the cache

Parameters:
	name			- the name of the file to cache bust
*/

	cachify : function(where, index, name, hash)
	{
		if (hash == null) return;
		if (index == -1)
			where.push(name + '?v=' + hash)
		else
			where[index] = name + '?v=' + hash;
	},

/**********************************************************************************
	Method: addState

	Call this method to add a global state css class to the body tag

	Paramters:
		state		- the css class name
*/
	addState : function(state)
	{
		this.states.push(state);
	},

/**********************************************************************************
Method: addVariable

Call this method to add a javascript variable to the application. These
variables will be output to the namespace specified in the constructor

Parameters:
	key			- the name of the variable
	value		- the variable to set. This should be a native type, not a JSON
					encoded string
*/
	addVariable : function(key, value)
	{
		this.variables[key] = value;
	},

/**********************************************************************************
Method: addUrl

Call this method to add a url to the list of managed urls. th eurl's will
be availabel in <namespace>.urls

Parameters:
	name		- the name of the url
	value		- the url itself
*/
	addUrl : function(name, value)
	{
		this.urls[name] = value;
	},

/**********************************************************************************
Method: addConfig

Call this method to add a javascript variable that is used as part of configuration.
These variables will be output before the javascript is included.

Parameters:
	key			- the name of the variable
	value		- the variable to set. This should be a php type, not a JSON
					encoded string
*/
	addConfig : function(key, value)
	{
		this.config[key] = value;
	},

/**********************************************************************************
Method: addLink

Call this method to add a <link> tag to the output html

Parameters:
	rel			- the rel attribute of the link tag
	href		- the href link for the link tag
	type		- the type of the link tab
*/
	addLink : function(rel, href, type)
	{
		this.links.push({rel: rel, href: href, type: type});
	},

/**********************************************************************************
Method: setBody

Call this method to set the file that specifies the body of the application.
This file should exclude all the html structure tags. The body will appear
between the <body> and </body> tags.

Parameters:
	file			- the name of the body file.
 */
	setBody : function(file)
	{
		this.processFile(file, this.readFile.bind(this, function(content)
		{
			this.body = content;
		}.bind(this)));
	},

/**********************************************************************************
Method: addTemplates

Call this method to add html files that contain global templates.
By default the templates will follow the body

Parameters:
	file			- the name of the body file. It will be relative to the
						views folder
*/
	addTemplates : function(file)
	{
		this.processFile(file, this.readFile.bind(this, function(content)
		{
			this.templates.push(content);
		}.bind(this)));
	},

/**********************************************************************************
Method: addFileReplacement

Call this method to add a replacement that is a file. This will replace a {<name>}
variable in the output html with the contents of a file

Parameters:
	name			- the name of the {} variable
	value			- the path to the file of html
*/
	addFileReplacement : function(name, file)
	{
		this.processFile(file, this.readFile.bind(this, function(content)
		{
			this.replacements[name] = content;
		}.bind(this)));
	},

/**********************************************************************************
Method: addStringReplacement

Call this method to add a replacement that is a string. This will replace a {<name>}
string in the output html

Parameters:
	name			- the name of the {} variable
	value			- the block of html to use
*/
	addStringReplacement : function(name, value)
	{
		this.replacements[name] = value;
	},

/**********************************************************************************
Method: addJS

Call this method to add a JavaScript file to be loaded in main body of the
application. You do not need to add JavaScript files that are specific to
pages of the application.

Parameters:
	files			- list of javascript files to add
	dontBust		- true if the js file should not be run through the cache
					busting logic
*/
	addJS : function(files, dontBust)
	{
		dontBust = (dontBust == undefined)?false:dontBust;

		files.each(function(name)
		{
			if (this.javascriptFiles.indexOf(name) == -1)
			{
				var idx = this.javascriptFiles.length;
				this.javascriptFiles.push(name);
				if (!dontBust)
					this.processFile(name, this.md5HashFile.bind(this, this.cachify.bind(this, this.javascriptFiles, idx)));
			}
		}, this);
	},

/**********************************************************************************
Method: addCSS

Call this method to add a CSS file to be loaded in main body of the application.
You do not need to add CSS files that are specific to pages of the
application.

Parameters:
	file			- the name of the css file. It will be relative to the
					/css folder
*/
	addCSS : function(files, dontBust)
	{
		dontBust = (dontBust == undefined)?false:dontBust;

		var useFiles = [];
		files = files.unique();

		files.each(function(name)
		{
			var idx = this.javascriptFiles.length;
			this.CSSFiles.push(name);
			if (this.CSSFiles.indexOf(name) == -1)
			{
				if (!dontBust)
					this.processFile(name, this.md5HashFile.bind(this, this.cachify.bind(this, this.CSSFiles, idx)));
				else
					this.CSSFiles.push(name)
			}
		}, this);
	},

/**********************************************************************************
Method: addPage

Call this method to add a page to the application. Pages will be loaded on demand
and will appear in the html element with the id of "pages".

Pages are specified using a data structure with the following members

Spec:
	name		- the name of the page as it will be referenced in JavaScript.
				see <Application>
	url			- the path to the page template.
 	javascript	- an array of javascript files to be loaded before the page is
				displayed. These javascript files can assume that the dom has
				been loaded with the page content.
	css			- an array of css files to be loade for this page
	dontPrune	- set this to true to prevent the page from being removed from
				the dom when a new page is loaded. This is typically needed
				for pages with flash content

Parameters:
	spec		- the specification for this page
*/
	addPage : function(spec)
	{
		spec = $H(spec);

		spec.javascript = spec.javascript.unique();
		spec.css = spec.css.unique();

		spec.javascript.each(function(name, index)
		{
			this.processFile(name, this.md5HashFile.bind(this, this.cachify.bind(this, spec.javascript, index)));
		}, this);

		spec.css.each(function(name, index)
		{
			this.processFile(name, this.md5HashFile.bind(this, this.cachify.bind(this, spec.css, index)));
		}, this);

		this.processFile(spec.url, this.md5HashFile.bind(this, this.cachify.bind(this, spec, 'url')));
		this.pages.push(spec);
	},

/**********************************************************************************
Method: addDialog

Call this method to add a dialog to the application. Dialogs will be loaded on demand
and will appear in the html element with the id of "dialogs".

Dialogs are specified using a data structure with the following members

Spec:
	name				- the name of the dialog as it will be referenced in JavaScript.
						see <Application>
	url					- the path to the dialog template. This file will be relative to
						views/dialogs. You need to include the extension of the dialog
						file, but .html is recommended
	javascript			- an array of javascript files to be loaded before the dialog is
						displayed. These javascript files can assume that the dom has
						been loaded with the dialog content.
	css					- an array of css files to be loade for this dialog

Parameters:
	spec				- the specification for this dialog
*/
	addDialog : function(spec)
	{
		spec = $H(spec);

		spec.javascript = spec.javascript.unique();
		spec.css = spec.css.unique();

		spec.javascript.each(function(name, index)
		{
			this.processFile(name, this.md5HashFile.bind(this, this.cachify.bind(this, spec.javascript, index)));
		}, this);

		spec.css.each(function(name, index)
		{
			this.processFile(name, this.md5HashFile.bind(this, this.cachify.bind(this, spec.css, index)));
		}, this);

		this.dialogs.push(spec);
	},

/**********************************************************************************
Method: setTitle

Call this method to set the title of the application. This will appear in the <title> tag
of the output html

Parameters:
	title				- the title string
*/
	setTitle : function(title)
	{
		this.title = title;
	},

/**********************************************************************************
Method: addMetadata

Call this method to add metadata to the application. This will appear in a <metadata> tag.

Parameters:
	name 		- the name of the metadata variable
	content 	- the value of the metadata variable
*/
	addMetadata : function(name, content)
	{
		this.metadata.push({name: name, content: content});
	},

/**********************************************************************************
Method: makeFilename

Call this method to get the relative path name to a js or css file

Parameters:
	filename	- the original include file
*/
	makeFilename : function(filename)
	{
		var index = filename.indexOf('assets');
		if (index == 0)
			filename = 'public/' + filename;
		else if (index != -1)
			filename = 'apps/' + filename;

		return filename;
	},

/**********************************************************************************
Method: addFavicon

Call this method to set the favicon file.

Parameters:
	filename 	- the name of the favicon file
*/
	setFavicon : function(filename)
	{
		this.favicon = filename;
	},


/**********************************************************************************
Method: md5Hash

Given a data string, return the md5 hash as a hex string

Parameters:
	data 	- the data to be hashed
*/
	md5Hash : function(data)
	{
		var md5sum = crypto.createHash('md5');
		md5sum.update(data);
		return md5sum.digest('hex');
	},

/**********************************************************************************
Method: md5HashFile

This function is designed to be called from <processfile>. It will
asynchronously calculate the md5 hash of the given file

Parameters:
	callback		- the function to call with the result. this function will be
						passed null of there was a file error
	name 			- the path to the file
	doneCallback	- a function to call when processing is complete
*/
	md5HashFile : function(callback, name, doneCallback)
	{
		var filename = this.makeFilename(name);

		if (fileCache[filename] == undefined || !CONFIG.builderCache)
		{
			fs.readFile(filename, function (err, data)
			{
				if (err) callback(null);
				else
				{
					data = data.toString();
					fileCache[filename] = data;
					callback(name, this.md5Hash(data));
				}
				doneCallback();
			}.bind(this));
		}
		else
		{
			callback(name, this.md5Hash(fileCache[filename]));
			doneCallback();
		}
	},

/**********************************************************************************
Method: readfile

This function is designed to be called from <processfile>. It will
read the contents of the file and pass that to the callback

Parameters:
	callback		- the function to call with the result. this function will be
						passed null of there was a file error
	name 			- the path to the file
	doneCallback	- a function to call when processing is complete
*/
	readFile : function(callback, name, doneCallback)
	{
		var filename = this.makeFilename(name);
		if (fileCache[filename] == undefined || !CONFIG.builderCache)
		{
			fs.readFile(filename, function (err, data)
			{
				if (err) callback(null);
				else
				{
					data = data.toString();
					fileCache[filename] = data;
					callback(data);
				}

				doneCallback();
			}.bind(this));
		}
		else
		{
			callback(fileCache[filename]);
			doneCallback();
		}
	},

/**********************************************************************************
Method: processFile

call this method to add an asynchronous file function to the waiting queue.

Parameters:
	file		- the name of the file. this will be passed to the process callback
	process 	- a function to call to do the operation. This function will be
				passed a callback to be called when processing is complete
*/
	processFile : function(file, process)
	{
		this.processing++;
		process(file, this.processingComplete.bind(this));
	},

/**********************************************************************************
Method: processComplete

this is the function called when an asnchronous file processing function has completed.
It will fire a processingDone event when the wait queue is empty
*/
	processingComplete : function()
	{
		this.processing--;
		if (this.processing == 0)
			this.emit('processingDone');
	},

/**********************************************************************************
Method: waitOnProcessing

Call this function to wait for all processing functions to complete

Parameters:
	callback		- this function will be called when the queue is empty. This
					may be immediatelty
*/
	waitOnProcessing : function(callback)
	{
		if (this.processing == 0)
			callback()
		else
		{
			this.on('processingDone', function()
			{
				callback();
			}.bind(this));
		}
	},

/**********************************************************************************
Method: replace

Given a source string and a hash map, find all occurances of {key} with the corresponding
value

Parameters:
	source				- the sorce string
	spec				- a hash map with the replacement keys and values

Return:
	the new result
*/
	replace : function(source, spec)
	{
		spec = $H(spec);
		spec.each(function(value, name)
		{
			source = source.replace('{' + name + '}', value);
		}, this);

		return source;
	},

/**********************************************************************************
Method: getHTML

Call this method to get the full html for the application suitable to be output
to the browser

Returns:
	The html for the application
*/
	getHTML : function(callback)
	{
		this.waitOnProcessing(function ()
		{
			var favicon = '';
			var title = '';
			var masterCSS = '';
			var masterJS = '';
			var masterLinks = '';
			var javaScript = '';
			var ns = this.ns;
			var app = 'SPA.application';
			var loader = 'SPA.loader';

			var metadata = '';
			this.metadata.each(function(data)
			{
				var name = JSON.stringify(data['name']);
				var content = JSON.stringify(data['content']);
				metadata += '	<meta name=' + name + ' content=' + content + ' />\n';
			}, this);

			favicon = '	<link rel="icon" type="image/png" href="' + this.favicon + '">';

			title = '	<title>' + this.title + '</title>';

			masterJS += '	<script type=\"text/javascript\">\n';
			masterJS += '		var ' + ns + '= {};\n';
			masterJS += '		var SPA = {};\n';
		// The configuration variables
			this.config.each(function(value, name)
			{
				var json = JSON.stringify(value);
				var line = '		' + ns + '.' + name + ' = ' + json + ';\n';
				masterJS += line;
			}, this);
			masterJS += '	</script>\n';
		// construct the list of javascript files to be output
			this.javascriptFiles.each(function(file)
			{
				masterJS += '	<script type=\"text/javascript\" src=\"' + file +'\"></script>\n';
			}, this);

		// consruct the list css files to be output
			this.CSSFiles.each(function(file)
			{
				masterCSS += '	<link type=\"text/css\" rel=\"stylesheet\" href=\"' + file + '\"/>\n';
			}, this);

		// consruct the list link files to be output
			this.links.each(function(link)
			{
				masterLinks += '	<link rel=\"' + link.rel + '\" href=\"' + link.href + '\" type=\"' + link.type + '"/>\n';
			}, this);

		// construct the inline javascript to add to the html page
			javaScript += '	<script type=\"text/javascript\">\n';
			javaScript += '		SPA.ns = ' + JSON.stringify(ns) + ';\n';

		// The variables
			this.variables.urls = this.urls;
			this.variables.each(function(value, name)
			{
				var json = JSON.stringify(value);
				var line = '		' + ns + '.' + name + ' = ' + json + ';\n';
				javaScript += line;
			}, this);

		// The pages
			this.pages.each(function(page)
			{
				var json = JSON.stringify(page);
				javaScript += '		' + app + '.addPage(' + json + ');\n';
			}, this)

		// The dialogs
			this.dialogs.each(function(dialog)
			{
				var json = JSON.stringify(dialog);
				javaScript += '		' + app + '.addDialog(' + json + ');\n';
			}, this);

			this.javascriptFiles.each(function(file)
			{
				var json = JSON.stringify(file);
				javaScript += '		' + loader + '.addLoadedScript(' + json + ');\n';
			}, this);

			this.CSSFiles.each(function(file)
			{
				var json = JSON.stringify(file);
				javaScript += '		' + loader + '.addLoadedCSS(' + json + ');\n';
			}, this);


			javaScript += '		$(function(){SPA.application.start()})\n';
			javaScript += '	</script>\n';

			var states = this.states.join(' ');

		// templates
			this.templates.each(function(content)
			{
				this.body += '\n' + content;
			}, this);

		// Put it all together
			var html = this.master;
			var replacements = {};
			//html = html.substitute({body: this.body});


			replacements = {body: this.body, favicon:favicon, metadata: metadata, title: title, masterCSS: masterCSS, masterLinks: masterLinks, masterJS: masterJS, javaScript: javaScript, states: states};

			this.replacements.each(function(value, name)
			{
				replacements[name] = value
			}, this);

		// do this two levels deep (totally arbitrary)
			html = this.replace(html, replacements);

			callback(html);
		}.bind(this));
	}
});

exports.Application.implement(events.EventEmitter.prototype);

