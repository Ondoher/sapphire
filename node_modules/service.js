var url = require('url');
var fs = require('fs');
var path = require('path');
var qs = require('querystring');

/**********************************************************************************
	File: service.js

	Service calls take the following form:

	> /service/<app>/<service>/[...objects]/<method>

	This file is the router for services. To find the service, the service router looks for a directory named services
	in the application directory, and within that directory tries to load <service>.js. Each service must export the function
	getService that will return an object that represents the service. The router will then attempt to drill down into
	this service object to find the objects specified. for instance, if your service was named account, and you had an object named
	'settings' and a method named 'set', it would look for the presence of 'settings' within the service object.

	The last part of the route is assumed to be the method name. The router will verify that this is a function, and then call
	it, passing the request, the response and the post data.

	Params:
		app        - The name of the application that implemented the service
		service    - The name of the service being called
		objects    - a nested list of objects, for example, "building.resouces"
		method     - the specific servicemethod being called

	Example:
		> /service/kabam/queue/build/get

**********************************************************************************/
var ServiceHandler = new Class({
	initialize : function()
	{
		this.services = $H({});
	},

	getService : function(servicePath, callback)
	{
		if (!this.services.has(servicePath))
		{
			path.exists(servicePath, function(exists)
			{
				if (!exists) calback(null);
				else
				{
					this.services.set(servicePath, require(servicePath).getService());
					callback(this.services.get(servicePath));
				}
			}.bind(this));
		}
		callback.delay(1, this, this.services.get(servicePath));
	},

	handleResult : function(request, response, result)
	{
		response.writeHead(200, {'Content-Type': 'text/json'});
		response.end(JSON.stringify(result));
	},

/**********************************************************************************
	Function: callService

	This function is called by the router to execute a service call.

	Params:
		request    - the request object
		response   - the response object
		data       - the post body
*/
	callService : function(request, response, data)
	{
		var query = url.parse(request.url);
		var paths = query.pathname.split('/');

		var app = paths[2];
		var service = paths[3];
		var servicePath = fs.realpathSync(path.normalize('./apps/' + app + '/services/' + service + '.js'));
		console.log('servicePath', servicePath);

		var POST = qs.parse(data);
		var parameters = JSON.decode(POST.paramters);

		getService(servicePath, function(service)
		{
			if (service == null)
			{
				response.end(JSON.stringify({success: false, error: 'service not found'}));
				return;
			}

			var obj = service;

			for (var idx = 4; idx < paths.length - 1; idx++)
			{
				if (!(paths[idx] in obj))
				{
					response.end(JSON.stringify({success: false, error: 'service not found'}));
					return;
				}

				obj = obj[paths[idx]];
			}

			if (!(paths[paths.length - 1] in obj) || (typeof(obj[paths[paths.length - 1]]) !== 'function'))
			{
				response.end(JSON.stringify({success: false, error: 'service not found'}));
				return;
			}

			parameters.push(this.handleResponse.bind(this, request, response));

			obj[paths[paths.length - 1]].apply(obj, parameters);
		}.bind(this));
	}
});

var SERVICE_HANDLER = new ServiceHandler();
exports.callService = SERVICE_HANDLER.callService.bind(SERVICE_HANDLER);

