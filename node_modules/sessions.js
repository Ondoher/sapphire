var events = require('events');
var uuid = require('node-uuid');
var redis = require('redis');
var mootools = require('./mootools').apply(GLOBAL);
var Cookies = require('cookies');
var crypto = require('crypto');

var Session = new Class(
{
	initialize : function(req, res, redisClient)
	{
		this.sessionId = req.cookies.get('sessionId');
		this.redisClient = redisClient;

		res.on('finish', this.onResponseDone.bind(this));
		if (!this.sessionId)
		{
			this.sessionId = uuid.v4();
			data = JSON.stringify({});

			var md5sum = crypto.createHash('md5');
			md5sum.update(data);
			this.hash = md5sum.digest('hex');

			this.session = {};
			this.done = true;
			if (this.waiting) this.emit('done');
		}
		else redisClient.get(this.sessionId, function(err, data)
		{
			if (data == null)
			{
				this.sessionId = uuid.v4();
				data = JSON.stringify({});
			}
			var md5sum = crypto.createHash('md5');
			md5sum.update(data);
			this.hash = md5sum.digest('hex');

			this.session = JSON.parse(data);

			redisClient.expire(this.sessionId, 60 * 60 * 24);
			this.done = true;

			if (this.waiting) this.emit('done');
		}.bind(this));

		res.cookies.set('sessionId', this.sessionId);
	},

	wait : function(callback)
	{
		if (this.done) return callback();
		this.waiting = true;
		this.on('done', function()
		{
			callback();
		}.bind(this));

	},

	get : function()
	{
		return this.session;
	},

	update : function(session)
	{
		this.session = session;
		this.redisClient.set(this.sessionId, JSON.stringify(this.session));
		this.redisClient.expire(this.sessionId, 60 * 60 * 24);
	},

	onResponseDone : function()
	{
		data = JSON.stringify(this.session);
		var md5sum = crypto.createHash('md5');
		md5sum.update(data);
		var hash = md5sum.digest('hex');

		if (hash != this.hash)
		{
//			console.info('updated session', this.session, this.sessionId);
			this.update(this.session);
		}
	}
});
Session.implement(events.EventEmitter.prototype);

module.exports = function(client)
{
	return function(req, res, next)
	{
		req.session = new Session(req, res, client);
		req.session.wait(function()
		{
			next();
		});
	}
}
